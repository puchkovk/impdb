<?php
/**
 * Copyright Â© 2018 Konstantin Puchkov. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * File tests/ImpDbTest.php
 */

use PHPUnit\Framework\TestCase;

require_once (realpath(__DIR__ . '/../') . '/src/autoload.php');

class ImpDbTest extends TestCase
{
    /**
     * @var \ImpDB\DB
     */
    protected static $db;

    public static function setUpBeforeClass()
    {
        self::$db = new \ImpDB\DB(new \ImpDB\Driver\Mock('pks', '222333', 'ti_test'));
        //self::$db->connectMock();

        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
    }

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testDbInstance()
    {
        $this->assertInstanceOf(
            \ImpDB\DB::class,
            self::$db
        );
    }

    public function testSelectSimple()
    {
        $this->assertEquals(
            'SELECT `tbl`.`aaa` as `tbl_a` FROM `tbl`',
            (string) self::$db->select([['tbl.aaa', 'tbl_a']])->from('tbl')
        );
    }

	/**
	 * @throws \ImpDB\Exception\QueryException
	 */
    public function testSelectJoin()
    {
        $this->assertEquals(
            /** @lang SQL */
            'SELECT `tbl`.`aaa` FROM `tbl` JOIN `t2` ON (`t2`.`id` = `tbl`.`id`)',
            (string) self::$db->select(['tbl.aaa'])
                ->from('tbl')
                ->join('t2')
                    ->on('t2.id', '=', 'tbl.id')
        );
    }

	/**
	 * @throws \ImpDB\Exception\QueryException
	 */
    public function testSelectJoinLeft()
    {
        $this->assertEquals(
            'SELECT `tbl`.`aaa` FROM `tbl` LEFT JOIN `t2` ON (`t2`.`id` = `tbl`.`id`)',
            (string) self::$db->select(['tbl.aaa'])
                ->from('tbl')
                ->join('t2', 'LEFT')
                ->on('t2.id', '=', 'tbl.id')
        );
    }

    public function testSelectWithWhere()
    {
        $this->assertEquals(
            'SELECT * FROM `tbl` WHERE `a` = \'test\'',
            (string) self::$db->select(['*'])
                ->from('tbl')
                ->where('a', '=', 'test')
        );
    }

    public function testSelectWithWhere2()
    {
        $this->assertEquals(
            'SELECT * FROM `tbl` WHERE `a` = \'test\' AND `b` = \'23\'',
            (string) self::$db->select(['*'])
                ->from('tbl')
                ->where('a', '=', 'test')
                ->where('b', '=', '23')
        );
    }

    public function testSelectWithOrWhere()
    {
        $this->assertEquals(
            'SELECT * FROM `tbl` WHERE `a` = \'test\' AND ( `c` = \'century\' OR `b` = \'23\' )',
            (string) self::$db->select(['*'])
                ->from('tbl')
                ->where('a', '=', 'test')
                ->whereOpen()
                    ->where('c', '=', 'century')
                    ->orWhere('b', '=', '23')
                ->whereClose()
        );
    }

    public function testSelectWithOrWhere2()
    {
        $this->assertEquals(
            'SELECT * FROM `tbl` WHERE ( `c` = \'century\' OR `b` = \'23\' ) OR ( `g` = \'Garvard\' AND `d` = \'London\' )',
            (string) self::$db->select(['*'])
                ->from('tbl')
                ->whereOpen()
                    ->where('c', '=', 'century')
                    ->orWhere('b', '=', '23')
                ->whereClose()
                ->orWhereOpen()
                    ->where('g', '=', 'Garvard')
                    ->where('d', '=', 'London')
                ->whereClose()
        );
    }

    /**
     * @throws \ImpDB\Exception\QueryException
     */
    public function testUpdate()
    {
        $this->assertEquals(
            'UPDATE `tbl` SET `aaa` = \'123\'',
            (string) self::$db->update('tbl')
                ->set(['aaa' => 123])
        );
    }

    /**
     * @throws \ImpDB\Exception\QueryException
     */
    public function testUpdateWithWhere()
    {
        $this->assertEquals(
            'UPDATE `tbl` SET `aaa` = \'123\' WHERE `id` = \'12\'',
            (string) self::$db->update('tbl')
                ->set(['aaa' => 123])
                ->where('id', '=', '12')
        );
        $this->assertEquals(
            'UPDATE `tbl` SET `aaa` = \'123\' WHERE `id` IN (\'12\', \'14\')',
            (string) self::$db->update('tbl')
                ->set(['aaa' => 123])
                ->where('id', 'IN', ['12','14'])
        );
    }

    /**
     * @throws \ImpDB\Exception\QueryException
     */
    public function testUpdateWithLimit()
    {
        $this->assertEquals(
            'UPDATE `tbl` SET `aaa` = \'123\' WHERE `id` = \'12\' LIMIT 1',
            (string) self::$db->update('tbl')
                ->set(['aaa' => 123])
                ->where('id', '=', '12')
                ->limit(1)
        );
    }
}